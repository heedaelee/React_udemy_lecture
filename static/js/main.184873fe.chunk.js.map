{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","console","log","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.184873fe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, id, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{id}</h2>\r\n        <p>{email}</p>\r\n        <p>{name}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport {robots} from '../robots';\r\n//robots은 export default 아니므로(멀티형식) {}로 받지 않는다.\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className = 'pa3 ba b--green bg-lightest-blue'\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n constructor(props) {\r\n   super(props);\r\n   this.state = {\r\n     hasError: false\r\n   } \r\n }\r\n\r\n componentDidCatch(error, info) {\r\n  this.setState ({ hasError: true})\r\n }\r\n\r\n render(){\r\n   if(this.state.hasError){\r\n     return <h1>Oooops. That is not good</h1>\r\n   }\r\n   return this.props.children\r\n }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n    console.log(\"componentDidMount\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render\");\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f2\">RoboFrends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n//1. fisrt connect() 2. after return, second (App)\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constant\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constant\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport { searchRobots, requestRobots } from \"./reducer\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\nconst store = \r\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}